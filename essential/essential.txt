I. Vue.js Introduction 
II. The Vue Instance 
III. Template Syntax
IV. Computed Properties and Watchers
V. Class and Style Bindings
VI. Conditional Rendering
VII. List Rendering
VIII. Event Handling 
IX. Form Input Bindings 
X. Component Basics
============================

*FOR MAC 
export PATH=$PATH:/Users/denis/.npm-global/bin

export PATH=$PATH:/Users/(name of the computer)/(name of the folder))/bin

----------------------------
I. Vue.js Introduction 

src="https://cdn.jsdelivr.net/npm/vue" - production version, optimized for size and speed
src="https://cdn.jsdelivr.net/npm/vue/dist/vue.js" - development version, includes helpful console warnings

*1. There are some features of production version do not have, but development version has.
*2. For exmaple, 'v-bind:title'

====

<div id="app-2">
  <span v-bind:title="message">
    Hover your mouse over me for a few seconds
    to see my dynamically bound title!
  </span>
</div>

var example2 = new Vue({
   el: '#app2',
   data: {
      message: 'This is hidden message!'
   }
})

*1. 'el' has to be same as the DOM's id or class(name).
*2. 'data' is the source that will be reflected in DOMs.
*3. To manipulate the data shwon on the DOM, use name of the variable(or instance). 
For exmaple, 'example.message = 'This is not Hidden Message Ha ha'.
====


'v-' is called a 'directive'.
'v-'s are reactive attributes provided by Vue.js

'v-bind' means “keep this element’s title attribute up-to-date with the message property on the Vue instance.”
*1. This can bind data to the structure of the DOM.
*2. Transition effects can be automatically applied to the DOM when inserted/updated/removed by Vue.

'v-if' is a conditional.

'v-for' is a loop.
*Usually for displaying a list of items.

'v-on' is for handling user input.
*eg : v-on:click="reverseMessage"
*Event Handlers must be defined in 'methods' variable.

'v-model' is two-way binding directive.
*As you change the state, the Vue automatically updates the DOM.


Defining a new component called todo-item
===
Vue.component('todo-item', {
  template: '<li>This is a todo</li>'
})

<ol>
  <!-- Create an instance of the todo-item component -->
  <todo-item></todo-item>
</ol>

*More dynamically
Vue.component('todo-item', {
   //name of the prop is 'todo'.
   //'props' is like a custom attribute.
   //'template' is like a format of how the data should be shown.
   props: ['todo'],
   template: '<li>{{todo.text}}/li>'
})

var app7 = new Vue({
   el : '#app7',
   data : {
      groceryList : [
         {id : 0 , text : Vegies},
         {id : 1 , text : cheese},
         {id : 2 , text : Milk}
      ]
   }
})

<div id="app7">
   <ol>
      <todo-item
         v-bind:todo="item"
         v-for="item in groceryList"
         v-bind:key="item.id"
      >
      </todo-item>
   </ol>
</div>


*Format
//creating new Component
Vue.component('Vue component Name', {
   props: ['custom name to be used after v-bind:'],
   template: '<li>{{custom name.specific data of the custom name}</li>'
})

var Vue instance name = new Vue({
   el : 'selector&name of desired DOM',
   data : {
      desired variable name : [
         {id : 0 , text : Vegies},
         {id : 1 , text : cheese},
         {id : 2 , text : Milk}
      ]
   }
})

<div id="Vue instance name">
   <ol>
      <Vue component Name
         v-bind:props' custom name="item"
         v-for="item in desired variable name"
         v-bind:key="desired variable name.id"
      >
      </Vue component Name>
   </ol>
</div>

===


If there are more than one Vue components in a DOM,
it will look like 
===
<div id="app">
  <app-nav></app-nav>
  <app-view>
    <app-sidebar></app-sidebar>
    <app-content></app-content>
  </app-view>
</div>
===

----------------------------

II. The Vue Instance 

Creating new Vue instance 
====
var vm = new vueInstance({
   // options 
})
*'vm' stands for View Model.
*A Vue application consists of a root Vue instance created with new Vue
*eg.
Root Instance
└─ TodoList
   ├─ TodoItem
   │  ├─ DeleteTodoButton
   │  └─ EditTodoButton
   └─ TodoListFooter
      ├─ ClearTodosButton
      └─ TodoListStatistics

*All Vue components are also Vue instances.
====

Vue API reference : https://vuejs.org/v2/api/#Options-Data

When a Vue instance is created, it adds all the properties found in its data object to Vue’s reactivity system. 
*react = update
====
// Our data object
var data = { a: 1 }

// The object is added to a Vue instance
var vm = new Vue({
  data: data
})

// Getting the property on the instance
// returns the one from the original data
vm.a == data.a // => true

// Setting the property on the instance
// also affects the original data
vm.a = 2
data.a // => 2

// ... and vice-versa
data.a = 3
vm.a // => 3
=====


*When this data changes, the view will re-render.
*Properties in data are only reactive if they existed when the instance was created.

vm.b = 'hi'
*This will not  trigger any view updates.
*To trigger view updates, set some initial value.
*eg.
====
data: {
  newTodoText: '',
  visitCount: 0,
  hideCompletedTodos: false,
  todos: [],
  error: null
}
====

Object.freeze()
*Prevents existing properties from being changed
*Reactivity system can’t track changes.
*When freeze is set and attemps to change state, 'read only' error will occur.

$
*useful instance properties and methods's prefix.
*It is for differentiate Vue instances from user-defined properties.
*$watch is an instance method.
*eg.
===
var data = { a: 1 }
var vm = new Vue({
  el: '#example',
  data: data
})

vm.$data === data // => true
vm.$el === document.getElementById('example') // => true

// $watch is an instance method
vm.$watch('a', function (newValue, oldValue) {
  // This callback will be called when `vm.a` changes
})
===

Instance Lifecycle Hooks
*Each Vue instance goes through a series of initialization steps when it’s created 
*1. Set up data observation
*2. Compile the template
*3. Mount the instance to the DOM.
*4. Update the DOM when data changes.
*5. Runs lifecycle hooks
*lifecycle hooks : a function that enables to add your own code at specific stages.


created hook 
*Runs code after an instance is created.
*eg. onLoad()
====
new Vue({
  data: {
    a: 1
  },
  created: function () {
    // `this` points to the vm instance
    console.log('a is: ' + this.a)
  }
})
*other hooks on instance's other stage of its lifecycle.
*mounted, updated, destroyed
*All lifecycle hooks are called with their 'this'context pointing to the Vue instance invoking it.
====


Don’t use arrow functions on an options property or callback.
*eg. created: () => console.log(this.a)
*eg. vm.$watch('a', newValue => this.myMethod())
*Since an arrow function doesn’t have a this, this will be treated as any other variable and lexically looked up through parent scopes until found
*Resulting in errors such as 'Uncaught TypeError: Cannot read property of undefined'
*'Uncaught TypeError: this.myMethod is not a function'


----------------------------

III. Template Syntax

Interpolations

1.Text
*“Mustache” syntax 
*{{}} interprets the data as plain text, not HTML.
*<span>Message : {{msg}}</span>
*{{msg}} will be replaced with corresponding data object.

v-once
*one-time interpolation
*do not update on data change.
*This will affect anything that is inside the node. (eg.childNodes)
*<span v-once>This will never change: {{msg}}</span>


2.Raw HTML

v-html
*directive to output real HTML

*Dynamically rendering arbitrary HTML on your website can be very dangerous because it can easily lead to XSS vulnerabilities. 
*Only use HTML interpolation on trusted content and never on user-provided content.


3.attributes

v-bind
*Solution for using {{}} inside HTML attributes.
*<div v-bind:id="dynamicId"></div>
*<button v-bind:disabled="isButtonDisabled">Button</button>
*'isButtonDisabled' has either null, undeined, or false.
*'disabled' attribute is not included in rendered <button> element.


4. Using JS expressions
*Each binding can only contain one single expression.
===
{{ number + 1 }}

{{ ok ? 'YES' : 'NO' }}

{{ message.split('').reverse().join('') }}

<div v-bind:id="'list-' + id"></div>
===

*The following example won't work.
===
<!-- this is a statement, not an expression: -->
{{ var a = 1 }}

<!-- flow control won't work either, use ternary expressions -->
{{ if (ok) { return message } }}
*Do not attempt to access to user defined globals in template expressions.
===


Directives

v-
* 'v-' attribute values are exprected to be a single Javascript expression.
*Except v-for
*Directives' job is to react to the DOM when the value of its expression changes. 


1. Arguments

Denoted by a colon after the directive name. 
*<a v-bind:href="url">...</a>
*<button v-on:click="doEventHandler"></button>


2. Dynamic Arguments 

===
<a v-bind:[attributeName]="url">...</a>
*If Vue instance has a data property of 'attributeName',
*whose value is 'href',
*then this binding will be equivalent to 'v-bind:href'

<a v-on:[eventName]="doSomething">...</a>
*When 'eventName's value is 'focus'
*v-on:[eventName] will be equivalent to 'v-on:focus'.
===

'in-DOM templates ' = templates directly written in an HTML file.

===
<!-- This will trigger a compiler warning. -->
<a v-bind:['foo' + bar]="value"> ... </a>

<!-- This will be converted to v-bind:[someattr] in in-DOM templates. -->
<a v-bind:[someAttr]="value"> ... </a>
*Use expressions without spaces, quotes, uppercases
===


3. Modifiers
Special postfixes denoted by a dot.
*This indicates that a directive should be bound in some special way.
===
<form v-on:submit.prevent="onSubmit"> ... </form>
*'.prevent' tells 'v-on' directive to call 'event.preventDefault()' on the triggered event.
===


Shorthands
v-
*Serves as a visual cue for identifying Vue-specific attributes in your templates.
*'v-' prefix becomes less important when you are building a SPA.
*Vue provides special shorthands for two of the most often used directives.
*'v-bind' and 'v-on'


1.v-bind Shorthand
===
<!-- full syntax -->
<a v-bind:href="url"> ... </a>

<!-- shorthand -->
<a :href="url"> ... </a>

<!-- shorthand with dynamic argument (2.6.0+) -->
<a :[key]="url"> ... </a>
===


2.v-on Shorthand
===
<!-- full syntax -->
<a v-on:click="doSomething"> ... </a>

<!-- shorthand -->
<a @click="doSomething"> ... </a>

<!-- shorthand with dynamic argument (2.6.0+) -->
<a @[event]="doSomething"> ... </a>
*v-bind => (blank)
*v-on: => @
*These do not appear in the final rendered markup.
===


----------------------------

IV. Computed Properties and Watchers

Computed Properties
*Complex logixs are done at Vue instance, not on in-template.
*In-template expressions are only for very simple operations.
*Anything that needs computation must be expressed(function())) in 'computed' object.


1. Computed Caching vs methods
*Computed properties are cached based on their reactive dependencies.
*If data is not changed, no matter how many times you access to reversedMessage,
*reversedMessage will return previously computed result, 
*without having to run the function again.
*eg.
===
computed: {
  now: function () {
    return Date.now()
  }
}
*This will never update, because Date.now() is not a reactive dependency.
*However, method invocation will always run the function whenever a re-render happens.
===

Why do need caching?
*To make function or program less heavy.
*To prevent from repeating complex logic again.


2. Computed vs Watched property

===
//watch Version
<div id="demo">{{ fullName }}</div>

var vm = new Vue({
  el: '#demo',
  data: {
    firstName: 'Foo',
    lastName: 'Bar',
    fullName: 'Foo Bar'
  },
  watch: {
    firstName: function (val) {
      this.fullName = val + ' ' + this.lastName
    },
    lastName: function (val) {
      this.fullName = this.firstName + ' ' + val
    }
  }
})


//Computed Property Version
var vm = new Vue({
  el: '#demo',
  data: {
    firstName: 'Foo',
    lastName: 'Bar'
  },
  computed: {
    fullName: function () {
      return this.firstName + ' ' + this.lastName
    }
  }
})
===


3. Computed Setter
===
// ...
computed: {
  fullName: {
    // getter
    get: function () {
      return this.firstName + ' ' + this.lastName
    },
    // setter
    set: function (newValue) {
      var names = newValue.split(' ')
      this.firstName = names[0]
      this.lastName = names[names.length - 1]
    }
  }
}
// ...
*The setter will be invoked when you run 'vm.fullName= 'john doe''.
*vm.firstName and vm.lastName will be updated accordingly.
===


Watchers
*Useful for performing asynchronous or expensive operations in response to changing data.


----------------------------

V. Class and Style Bindings

*v-bind:class={}
*v-bind:style={}

1.Binding HTML classes

Object Syntax
===
<div v-bind:class="{ active : isActive}"></div>
*'active' will be determined by 'isActive'.

<div
  class="static"
  v-bind:class="{ active: isActive, 'text-danger': hasError }"
></div>

data: {
  isActive: true,
  hasError: false
}

<div class="static active"></div>
*If hasError becomes true, the class will be class="static active text-danger"
===


Array Syntax
===
<div v-bind:class="[activeClass, errorClass]">ArraySyntax</div>

data: {
   activeClass : 'active',
   errorClass : 'text-danger'
}

*This will render...
<div class="active text-danger"></div>

<div v-bind:class="[isActive ? activeClass : '', errorClass]"></div>

<div v-bind:class="[{active : isActive}, errorClass]"></div>

===


With components
===
Vue.component('my-component',{
   template : '<p class="foo bar">Hi<.p>'
})

<my-component class="baz boo"></my-component>

<p class="foo bar baz boo">Hi</p>
*class defined when component is created, remains and does not get overwritten.
---

<my-component v-bindLclass="{active : isActive}"></my-component>

<p class="foo bar active">Hi</p>
===


2.Binding Inline Styles

Object Syntax
*v-bind:style={} is a Js object.
===
<div v-bind:style="{ color: activeColor, fontSize: fontSize + 'px' }"></div>

data: {
  activeColor: 'red',
  fontSize: 30
}
--
<div v-bind:style="styleObject"></div>

data: {
  styleObject: {
    color: 'red',
    fontSize: '13px'
  }
}

*cleaner version(passing style object-recommended)
===

Array Syntax
===
<div v-bind:style="[baseStyles, overridingStyles]"></div>
===

Auto-prefixing
*Vue automatically detects vendor prefixes(eg. transform) in 'v-bind:style={}'
*and add appropreiate prefixes to the applied styles.


Multiple Values
===
<div v-bind:style="{ display: ['-webkit-box', '-ms-flexbox', 'flex'] }"></div>
*Only returns the value which browser supports.
===


----------------------------

VI. Conditional Rendering

v-if
v-else
v-else-if

===
<template v-if="ok">
  <h1>Title</h1>
  <p>Paragraph 1</p>
  <p>Paragraph 2</p>
</template>
*For attaching 'v-if' on more than one single element.
*<template> is an invisible wrapper
*The final rendered result will not include the <template> element.

<div v-if="type === 'A'">
  A
</div>
<div v-else-if="type === 'B'">
  B
</div>
<div v-else-if="type === 'C'">
  C
</div>
<div v-else>
  Not A/B/C
</div>
===


Controlling Reusable Elements with 'key'
===
<template v-if="loginType === 'username'">
  <label>Username</label>
  <input placeholder="Enter your username" key="username-input">
</template>
<template v-else>
  <label>Email</label>
  <input placeholder="Enter your email address" key="email-input">
</template>
*Keys with unique values.
*The value for username and email won't be shared anymore.
===

v-show
*Will always be rendered and remain in the DOM.
*Only toggles the 'display' CSS property.
*Always rendered regardless of initial condition.
*Does not support <template> nor 'v-else'.
*If something need to be toggled very often : v-show
*If the condition is unlikely to change at runtime : v-if


v-if w/ v-for
*Using v-if & v-for together is not recommended.
*'v-for' has higher priority than 'v-if'


----------------------------

VII. List Rendering

v-for
*'item in items'
*items = source data Array
*item = alias of iterated array element 
*Has full access to parent scope properties.
*Support second argument for the index of current item.
*Can iterate value of array.
*Support second argument for the property's name.
*During rendering, v-for uses inplace-patch.
===
<ul id="example-2">
  <li v-for="(item, index) in items">
    {{ parentMessage }} - {{ index }} - {{ item.message }}
  </li>
</ul>

<div v-for="(value, name) in object">
  {{ name }}: {{ value }}
</div>
---
<ul id="v-for-object" class="demo">
  <li v-for="value in object">
    {{ value }}
  </li>
</ul>

new Vue({
  el: '#v-for-object',
  data: {
    object: {
      title: 'How to do lists in Vue',
      author: 'Jane Doe',
      publishedAt: '2016-04-10'
    }
  }
})
===

'of' can be used instead of 'in'
*This is closer to JS syntax for iterators.
===
<div v-for="item of items"></div>
===

When iterating over an object, 
the order is based on the enumeration order of Object.keys().
This is not guaranteed to be consistent across JS engine implementations.


1. Maintaining state

inplace-patch 
*Suitable when list render output does not 
*rely on child component state, or temporary DOM state. 
*(eg. form input values)
===
<div v-for="item in items" v-bind:key="item.id">
  <!-- content -->
</div>
===
*Recommended : provide a 'key' attribute with v-for whenever possible.
*If the iterated DOM content is simple/ delying on the default behaviour
*for performance.
*Not to use non-primitive(objects, arrays) values as 'v-for' keys.



2. Array Change Detection
*Vue wraps an observed array's mutation methods.
*Mutation methods will trigger view updates.
push()
pop()
shift()
unshift()
splice()
sort()
reverse()
*mutation methods
---

filter()
concat()
slice()
*Does not mutate the original array.
*Returns a new array.
===
example1.items = example1.items.filter(function (item) {
  return item.message.match(/Foo/)
})
*Replace an Array
*VueJs does not re-render the entire list. (improves performance)
===


3. Caveats(Warnings, Cautions)

(Due to modern JS limitations)
Vue cannot detect the following changes in array.

*1. Directly set an item with the index
===
vm.items[indexOfItem] = newValue
===

*2. Modify the length of the array
===
vm.items.length = newLength
===

*1&*2
===
var vm = new Vue({
  data: {
    items: ['a', 'b', 'c']
  }
})
vm.items[1] = 'x' // is NOT reactive
vm.items.length = 2 // is NOT reactive

*To overcome previous caveat, triggering state updates is must.
// Vue.set
Vue.set(vm.items, indexOfItem, newValue)
or
vm.$set(vm.items, indexOfItem, newValue)

// Array.prototype.splice
vm.items.splice(indexOfItem, 1, newValue)
or
vm.items.splice(newLength)

*'vm.$set' is an alias for the global 'Vue.set'
===


(Due to modern JS limitations)
Vue cannot detect the property addition/deletion.

===
var vm = new Vue({
  data: {
    a: 1
  }
})
// `vm.a` is now reactive

vm.b = 2
// `vm.b` is NOT reactive
*Vue does not allow dynamically adding new root-level reactive properties
*to an already created instance.

Vue.set(object, propertyName, value)

---

var vm = new Vue({
  data: {
    userProfile: {
      name: 'Anika'
    }
  }
})

Vue.set(vm.userProfile, 'age', 27)
or
vm.$set(vm.userProfile, 'age', 27)
===


Object.assign()
_.extend()
*In case of assigning a number of new properties to an existing object
*Creating a fresh new object with properties from both objects is must.
===
vm.userProfile = Object.assign({}, vm.userProfile, {
  age: 27,
  favoriteColor: 'Vue Green'
})
===


4. Displaying Filtere/Sorted Results.

computed : {}
methods : {}
*Filtered or sorted version of an array 
*without actually mutating or resetting the original data. 

===
<li v-for="n in evenNumbers">{{ n }}</li>

data: {
  numbers: [ 1, 2, 3, 4, 5 ]
},
computed: {
  evenNumbers: function () {
    return this.numbers.filter(function (number) {
      return number % 2 === 0
    })
  }
}
---

<li v-for="n in even(numbers)">{{ n }}</li>

data: {
  numbers: [ 1, 2, 3, 4, 5 ]
},
methods: {
  even: function (numbers) {
    return numbers.filter(function (number) {
      return number % 2 === 0
    })
  }
}
===


5. 'v-for' with a range
*takes integer.
===
<div>
  <span v-for="n in 10">{{ n }} </span>
</div>
*Must create Vue instance for correct output
===

6. 'v-for' on a '<template>'
*Can render multiple templates
===
<ul>
  <template v-for="item in items">
    <li>{{ item.msg }}</li>
    <li class="divider" role="presentation"></li>
  </template>
</ul>
===

7. 'v-for' with 'v-if'
*Remember this is not recommended!
*Priority : v-for > v-if
===
<li v-for="todo in todos" v-if="!todo.isComplete">
  {{ todo }}
</li>
*Can be useful sometimes.
*The above only renders the todos that are not complete.
---
<ul v-if="todos.length">
  <li v-for="todo in todos">
    {{ todo }}
  </li>
</ul>
<p v-else>No todos left!</p>
*Conditionally skip execution of the loop
===

8.'v-for' with a component
===
<my-component v-for="item in items" :key="item.id"></my-component>
*Can directly use 'v-for' on a custom component.
*2.2.0+ 'key' is required.
===

Because components have isolated scopes of their own,
passing any data to the component is not possible.

To pass iterated data into the component,
props must be used.
===
<my-component
  v-for="(item, index) in items"
  v-bind:item="item"
  v-bind:index="index"
  v-bind:key="item.id"
></my-component>
===

Reason for not injecting 'item' into the component
*1. It makes the component tightly coupled to 'v-for'.
*2. Making clear the source of data will be helpful for reusing the data.

link : https://vuejs.org/v2/guide/list.html#v-for-with-a-Component
* $emit() : Toggles event in current instance.


----------------------------

VIII. Event Handling 

1. Listening to Events
v-on:
===
<div id="example-1">
  <button v-on:click="counter += 1">Add 1</button>
  <p>The button above has been clicked {{ counter }} times.</p>
</div>

var example1 = new Vue({
  el: '#example-1',
  data: {
    counter: 0
  }
})
===

2. Method Event Handlers
===
<div id="example-2">
  <!-- `greet` is the name of a method defined below -->
  <button v-on:click="greet">Greet</button>
</div>

var example2 = new Vue({
  el: '#example-2',
  data: {
    name: 'Vue.js'
  },
  // define methods under the `methods` object
  methods: {
    greet: function (event) {
      // `this` inside methods points to the Vue instance
      alert('Hello ' + this.name + '!')
      // `event` is the native DOM event
      if (event) {
        alert(event.target.tagName)
      }
    }
  }
})

// you can invoke methods in JavaScript too
example2.greet() // => 'Hello Vue.js!'
===


3. Methods in Inline Handlers
===
<div id="example-3">
  <button v-on:click="say('hi')">Say hi</button>
  <button v-on:click="say('what')">Say what</button>
</div>

new Vue({
  el: '#example-3',
  methods: {
    say: function (message) {
      alert(message)
    }
  }
})

---

<button v-on:click="warn('Form cannot be submitted yet.', $event)">
  Submit
</button>

// ...
methods: {
  warn: function (message, event) {
    // now we have access to the native event
    if (event) event.preventDefault()
    alert(message)
  }
}
*$event = original DOM event
===


4. Event Modifiers
*To write 'event.preventDefault()' & 'event.stopPropagation()' easily.
v-on:
.stop
.prevent
.capture
.self
.once
.passive

===
*the click event's propagation will be stopped
<a v-on:click.stop="doThis"></a>

*the submit event will no longer reload the page
<form v-on:submit.prevent="onSubmit"></form>

*modifiers can be chained
<a v-on:click.stop.prevent="doThat"></a>

*just the modifier
<form v-on:submit.prevent></form>

*use capture mode when adding the event listener
*i.e. an event targeting an inner element is handled here before being handled by that element
<div v-on:click.capture="doThis">...</div>

*only trigger handler if event.target is the element itself
*i.e. not from a child element
<div v-on:click.self="doThat">...</div>

*the click event will be triggered at most once
<a v-on:click.once="doThis"></a>

*the scroll event's default behavior (scrolling) will happen
*immediately, instead of waiting for `onScroll` to complete
*in case it contains `event.preventDefault()
<div v-on:scroll.passive="onScroll">...</div>

*'.passive' modifier is especially useful for improving performance on mobile devices.

Don’t use '.passive' and '.prevent' together.
*'.prevent' will be igonred and browser will show warnings.
*'.passive' communicates to the browser that you don’t want to prevent the event’s default behavior.
===

Modifiers' chain order is left to right.
*ex: 'v-on:click.prevent.self' - prevent all clicks.
*ex: 'v-on:click.self.prevent' - Only prevent clicks on the element itself.


5. Key Modifiers
*Vue allows adding key modifiers for v-on when listening for key events
===
*only call `vm.submit()` when the `key` is `Enter`
<input v-on:keyup.enter="submit">

*Can directly use any valid key names exposed via KeyboardEvent.key 
*as modifiers by converting them to kebab-case.

<input v-on:keyup.page-down="onPageDown">
*The handler will only be called if $event.key is equal to 'PageDown'.
===


6. Key Codes
*keyCode events is deprecated.
*May not be supported in the future.
*Some keys have different key values depending on browser and its version.
===
// enable `v-on:keyup.f1`
Vue.config.keyCodes.f1 = 112
*define custom key modifier aliases via the global 'config.keyCodes' object.
===



7. System Modifiers
.ctrl
.alt
.shift
.meta = windows Key / Mac command key

*modifier keys are different from regular keys 
*and when used with keyup events.
*They have to be pressed when the event is emitted.

*keyup.ctrl will only trigger if you release a key while holding down ctrl. 
*It won’t trigger if you release the ctrl key alone. 
*If you do want such behaviour, use the keyCode for ctrl instead: keyup.17.

.exact = triggers event only when exact (combinations)keys are pressed.
===
*this will fire even if Alt or Shift is also pressed
<button @click.ctrl="onClick">A</button>

*this will only fire when Ctrl and no other keys are pressed
<button @click.ctrl.exact="onCtrlClick">A</button>

*this will only fire when no system modifiers are pressed
<button @click.exact="onClick">A</button>
===

.left
.right
.middle
*Triggered by a specific mouse button.

Benefits of using v-on
===
1. Easy to locate handler function
*It is written right in the HTML template.

2. Don't need to attach event listeners
*Vue does this, making code clear with pure logics.

3. Don't need to clean up the listeners
*Vue clean them all after ViewModel is destoryed.
===

----------------------------

IX. Form Input Bindings 


1.Basic Usage 
'v-model' directive's Caveats

*Ignores initial value, checked, or selected attributes found on any form elements.
*Reason : Only treats Vue instance data as the true data.
*Solution : Declare initial value on the JS side, inside the 'data' property of the component.

'v-model' use 
*different properties
*emits different events
*for different input elements.

*text/textarea use 'value' property & 'input' event.
*checkbox/radiobutton use 'checked' property & 'change' event.
*select fields use 'value' as a prop and 'change' as an event.


*Problem : 'v-model' does not update during IME (jp,cn,kr).
*Solution : use 'input' event.

---

link : https://vuejs.org/v2/guide/forms.html#Text

*Problem : '<textarea>{{text}}</textarea>' won't work.
*Solution : use 'v-model'.

If nothing is selected, <select> returns 'unselected' state.
*Problem : In iOS, not able to select first item.
*Reason : It does not fire a 'change' event.
*Solution : Provide 'disabled' option with an empty value.


v-for <select> sample
===
<select v-model="selected">
  <option v-for="option in options" v-bind:value="option.value">
    {{ option.text }}
  </option>
</select>
<span>Selected: {{ selected }}</span>

new Vue({
  el: '...',
  data: {
    selected: 'A',
    options: [
      { text: 'One', value: 'A' },
      { text: 'Two', value: 'B' },
      { text: 'Three', value: 'C' }
    ]
  }
})
===


2. Value Bindings

===
CheckBox
<input
  type="checkbox"
  v-model="toggle"
  true-value="yes"
  false-value="no"
>

// when checked:
vm.toggle === 'yes'
// when unchecked:
vm.toggle === 'no'

*'true-value'/'false-value' don't affect input's 'value' attribute.

---

Radio 
<input type="radio" v-model="pick" v-bind:value="a">

// when checked:
vm.pick === vm.a

---

Select Options
<select v-model="selected">
  <!-- inline object literal -->
  <option v-bind:value="{ number: 123 }">123</option>
</select>

// when selected:
typeof vm.selected // => 'object'
vm.selected.number // => 123

===


3. Modifiers

v-model
*syncs the input with the data after each 'input' event. (Not when IME)

.lazy = to sync after 'change' events
===
<!-- synced after "change" instead of "input" -->
<input v-model.lazy="msg" >
===

.number = to automatically typecaset as a number
*If the value cannot be parsed with parseFloat(), original value is returned.
===
<input v-model.number="age" type="number">
===

.trim = to trim user's input automatically
===
<input v-model.trim="msg">
===


4. v-model with components
*Reusable input with customized behaviour is buildable.
*v-model can be used as attribute in these components.


----------------------------

X. Component Basics


1. Reusable Component

*1.Components are Reusable
*2.When the same components are used more than once, new instances are created.
*3. 'data' must be a function to maintain independently.
===
data: function () {
  return {
    count: 0
  }
}
*If 'data' is not function, all the same components will share the 'data's value.
===


2. Organizing Components
*To use components in templates(header, footer, sidebar etc)
*they must be registered so that Vue knows about them.
===
Vue.component('my-component-name', {
  // ... options ...
})
*this is global component.
===


3.Passing Data to Child Components with props

props = custom attributes you can register on a component.
*When a value is passed to a prop attribute, it becomes a property on that component instance.
===
Vue.component('blog-post', {
  props: ['title'],
  template: '<h3>{{ title }}</h3>'
})
*A component can have as many props as you’d like
*Any value can be passed to any prop.

<blog-post title="My journey with Vue"></blog-post>
<blog-post title="Blogging with Vue"></blog-post>
<blog-post title="Why Vue is so fun"></blog-post>

---

array 

new Vue({
  el: '#blog-post-demo',
  data: {
    posts: [
      { id: 1, title: 'My journey with Vue' },
      { id: 2, title: 'Blogging with Vue' },
      { id: 3, title: 'Why Vue is so fun' }
    ]
  }
})

<blog-post
  v-for="post in posts"
  v-bind:key="post.id"
  v-bind:title="post.title"
></blog-post>
*Useful when fetching posts from an API.
===


4. A Single Root Element.

*Error : every component must have a single root element.
*Solution : Wrap the component in a parent element. (eg. <div>)
===
<blog-post
  v-for="post in posts"
  v-bind:key="post.id"
  v-bind:post="post"
></blog-post>

Vue.component('blog-post', {
  props: ['post'],
  template: `
    <div class="blog-post">
      <h3>{{ post.title }}</h3>
      <div v-html="post.content"></div>
    </div>
  `
})
*henever a new property is added to post objects, 
*it will automatically be available inside <blog-post>.
===


5. Listening to Child Components Events

*Sending data from child to parent.
===
<blog-post
  ...
  v-on:enlarge-text="postFontSize += 0.1"
></blog-post>

<button v-on:click="$emit('enlarge-text')">
  Enlarge text
</button>

*enlarge-text = custom event name
*$emit() = the child component can emit an event on itself.
===


*Emitting a Value with an Event
===
<button v-on:click="$emit('enlarge-text', 0.1)">
  Enlarge text
</button>

//event's value
//$event = $emit()'s 2nd parameter.
<blog-post
  ...
  v-on:enlarge-text="postFontSize += $event"
></blog-post>

or 
//event handler is method
<blog-post
  ...
  v-on:enlarge-text="onEnlargeText"
></blog-post>

methods: {
  onEnlargeText: function (enlargeAmount) {
    this.postFontSize += enlargeAmount
  }
}
===

*Using v-model on Components 
===
<custom-input v-model="searchText"></custom-input>

Vue.component('custom-input', {
  props: ['value'],
  template: `
    <input
      v-bind:value="value"
      v-on:input="$emit('input', $event.target.value)"
    >
  `
})
*The <input> inside the component must
*Bind the 'value' attribute to a 'value' prop.
*On 'input', emit its own custom 'input' event with the new value.
===


6. Content Distribution with Slots

<slot>
*useful for passing content to a component
*Just add the slot in the desired area.
===
<alert-box>
  Something bad happened.
</alert-box>

Vue.component('alert-box', {
  template: `
    <div class="demo-alert-box">
      <strong>Error!</strong>
      <slot></slot>
    </div>
  `
})

*Correct Output in Inspection Mode
<div class="demo-alert-box">
  <strong>Error!</strong>
</div>
===


7. Dynamic Components

is
*special attribute
*shows component or content that satisfies the string value of 'is'.
===
<!-- Component changes when currentTabComponent changes -->
<component v-bind:is="currentTabComponent"></component>

*CurrentTabComponent can contain either:
*1. The name of a registered component
*2. Component’s options object
*link : https://jsfiddle.net/chrisvfritz/o3nycadu/

<!-- component changes when currentView changes -->
<component v-bind:is="currentView"></component>

<!-- necessary because `<my-row>` would be invalid inside -->
<!-- a `<table>` element and so would be hoisted out      -->
<table>
  <tr is="my-row"></tr>
</table>
===

8. DOM template parsing Caveats

*Consider the tags that are valid and their restrictions.
===
<table>
  <tr is="blog-post-row"></tr>
</table>

*'is' won't work properly on the following cases.
*String templates (e.g. template: '...')
*Single-file (.vue) components
*<script type="text/x-template">


