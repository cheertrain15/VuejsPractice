Reusability-Composition

I.Mixins
II.Custom Directives
III.Render Functions & JSX
IV. Plugins
V. Filters
===========================

I.Mixins

   1.BASIC

   *Mixins are a flexible way to distribute reusable functionalities for Vue components.
   *A mixin object can contain any component options.
   *When a component uses a mixin, all options in the mixin will be “mixed” 
   *into the component’s own options.
   ===
      // define a mixin object
      var myMixin = {
      created: function () {
         this.hello()
      },
      methods: {
         hello: function () {
            console.log('hello from mixin!')
         }
      }
      }

      // define a component that uses this mixin
      var Component = Vue.extend({
      mixins: [myMixin]
      })

      var component = new Component() // => "hello from mixin!"

      ---

      *my code
      var basicMixin = {
         methods : {
            hello: function(){
               console.log('hello from mixin')
            }
         }
      }

      var BasicMixined = Vue.extend({
         created : function(){
            console.log('bye from extended')
         },
         mixins : [basicMixin]
      })


      var basicMixinComponent = new BasicMixined()
      basicMixinComponent.hello();
   ===

   Mixin is like java's 'extends' / 'implement'.


   2. Option Merging
   ===
      var mixin = {
         data: function () {
            return {
               message: 'hello',
               foo: 'abc'
            }
         }
         }

      new Vue({
         mixins: [mixin],
         data: function () {
            return {
               message: 'goodbye',
               bar: 'def'
            }
         },
         created: function () {
            console.log(this.$data)
            // => { message: "goodbye", foo: "abc", bar: "def" }
         }
      })
      *'mixins : [mixin]' are loaded before lifecycle hook 'created'.
      *mixins options will be renewed/updated/merged to the Component's option.
      *same merge strategies are used in Vue.extend().
   ===


   3. Global Mixin
   *Use with caution! 
   *Once you apply a mixin globally, it will affect every Vue instance created afterwards.
   *This can be used to inject processing logic for custom options.
   ===
      // inject a handler for `myOption` custom option
      Vue.mixin({
         created: function () {
            var myOption = this.$options.myOption
            if (myOption) {
               console.log(myOption)
            }
         }
      })

      new Vue({
         myOption: 'hello!'
      })
      // => "hello!"
      *It affects every single Vue instance created.
   ===


   4. Custom Option Merge Strategies
   *Vue.config.optionMergeStrategies
   *If you want a custom option to be merged using custom logic
   ===
      Vue.config.optionMergeStrategies.myOption = function (toVal, fromVal) {
         // return mergedVal
      }
      ---
      var strategies = Vue.config.optionMergeStrategies
      strategies.myOption = strategies.methods
      ---
      *Vuex
      const merge = Vue.config.optionMergeStrategies.computed
      Vue.config.optionMergeStrategies.vuex = function (toVal, fromVal) {
         if (!toVal) return fromVal
         if (!fromVal) return toVal
         return {
            getters: merge(toVal.getters, fromVal.getters),
            state: merge(toVal.state, fromVal.state),
            actions: merge(toVal.actions, fromVal.actions)
         }
      }
   ===


II.Custom Directives

   *Vue also allows you to register your own custom directives.
   *For need of some low-level DOM access on plain elements
   ===
      // Register a global custom directive called `v-focus`
         Vue.directive('focus', {
         // When the bound element is inserted into the DOM...
         inserted: function (el) {
            // Focus the element
            el.focus()
         }
      })

      *register a directive locally
      directives: {
         focus: {
            // directive definition
            inserted: function (el) {
               el.focus()
            }
         }
      }
      *components also accept a directives option

      <input v-focus>

      --my code--
      <div id="custom-directives-intro">
         <input v-focus>
      </div>

      *local 
      var customeDirectivesIntro = new Vue({
         el : '#custom-directives-intro',
         directives : {
            focus : {
               inserted: function (el) {
                  el.focus()
               }
            }
         }
      })

      *global
      Vue.directive('focus',{
         inserted : function($el){
            $el.focus()
         }
      })
   ===

   1. Hook Functions

   *bind
   *called only once,  when the directive is first bound to the element.
   *This is where you can do one-time setup work.

   inserted
   *called when the bound element has been inserted into its parent node
   *(this only guarantees parent node presence, not necessarily in-document)

   update 
   *called after the containing component’s VNode has updated
   *but possibly before its children have updated

   componentUpdated
   *called after the containing component’s 
   *VNode and the VNodes of its children have updated

   unbind
   *called only once, when the directive is unbound from the element

   2. Directive Hook Arguments

   *el : the element the directive is bound to
   *binding : an object containing the properties
      *name : name of directive (with out v- )
      *value : value passed to the directive. 
      *oldValue : previous value,  only available in 'update' and 'componentUpdated'.
      *expression : the expression of the binding as string. (v-temp = "2+2" => "2+2")
      *arg : any argument passed to the directive.(v-temp:foo => foo)
      *modifiers : An object containing modifiers. ( v-temp.foo.bar => {foo:true , bar:true})
   *vnode : The virtual node produced by Vue’s compiler
   *oldVnode : previous virtual node. available in the 'update' and 'componentUpdated' hooks

   These are read-only and never modify them (el).
   If you need to share information across hooks, 
   it is recommended to do so through element’s dataset.
   ===
   <div id="hook-arguments-example" v-demo:foo.a.b="message"></div>

   Vue.directive('demo', {
   bind: function (el, binding, vnode) {
      var s = JSON.stringify
      el.innerHTML =
         'name: '       + s(binding.name) + '<br>' +
         'value: '      + s(binding.value) + '<br>' +
         'expression: ' + s(binding.expression) + '<br>' +
         'argument: '   + s(binding.arg) + '<br>' +
         'modifiers: '  + s(binding.modifiers) + '<br>' +
         'vnode keys: ' + Object.keys(vnode).join(', ')
      }
   })

   new Vue({
      el: '#hook-arguments-example',
      data: {
         message: 'hello!'
      }
   })
   ===

   3.Function shorthand
   ===
      Vue.directive('color-swatch', function (el, binding) {
        el.style.backgroundColor = binding.value
      })
   ===

   4.Object Literals
   ===
      *directive needs multiple values
      <div v-demo="{ color: 'white', text: 'hello!' }"></div>

      Vue.directive('demo', function (el, binding) {
         console.log(binding.value.color) // => "white"
         console.log(binding.value.text)  // => "hello!"
      })
   ===


III.Render Functions & JSX

   1.Basics
   *render function
   ===
      Vue.component('anchored-heading', {
         render: function (createElement) {
            return createElement(
               'h' + this.level,   // tag name
               this.$slots.default // array of children
            )
      },
         props: {
            level: {
               type: Number,
               required: true
            }
         }
      })
   ===

   2.Virtual DOM
   ===
      return createElement('h1', this.blogTitle)
   ===
   'createElement' returns 'createNodeDescription', not real DOM.
   This is virtual Node, VNode.

   ===
   // @returns {VNode}
   createElement(
      // {String | Object | Function}
      // An HTML tag name, component options, or async
      // function resolving to one of these. Required.
      'div',

      // {Object}
      // A data object corresponding to the attributes
      // you would use in a template. Optional.
      {
         // (see details in the next section below)
      },

      // {String | Array}
      // Children VNodes, built using `createElement()`,
      // or using strings to get 'text VNodes'. Optional.
      [
         'Some text comes first.',
         createElement('h1', 'A headline'),
         createElement(MyComponent, {
            props: {
            someProp: 'foobar'
            }
         })
      ]
   )
   ===
   